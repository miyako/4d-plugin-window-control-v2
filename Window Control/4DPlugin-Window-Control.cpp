/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-Window-Control.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Window Control
 #	author : miyako
 #	2019/09/30
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-Window-Control.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- Window Control
            
			case 1 :
                PA_RunInMainProcess((PA_RunInMainProcessProcPtr)WINDOW_SET_ENABLED, params);
				break;
			case 2 :
                PA_RunInMainProcess((PA_RunInMainProcessProcPtr)WINDOW_Get_enabled, params);
				break;
			case 3 :
                PA_RunInMainProcess((PA_RunInMainProcessProcPtr)WINDOW_SET_ICON, params);
				break;
			case 4 :
                PA_RunInMainProcess((PA_RunInMainProcessProcPtr)WINDOW_Get_icon, params);
				break;

            // --- Window Minimizing
            case 5 :
                PA_RunInMainProcess((PA_RunInMainProcessProcPtr)WINDOW_MINIATURIZE, params);
                break;
            case 6 :
                PA_RunInMainProcess((PA_RunInMainProcessProcPtr)WINDOW_DEMINIATURIZE, params);
                break;
            case 7 :
                PA_RunInMainProcess((PA_RunInMainProcessProcPtr)WINDOW_Is_miniaturized, params);
                break;
        }

	}
	catch(...)
	{

	}
}

#pragma mark -

NSWindow *getWindow(PA_long32 w) {
    
    //EX_GET_HWND has been fixed in 15R3 to return a NSWindow* on mac 64bit.
    //http://forums.4d.fr/Post/EN/15872830/1/17032044
    
    PA_ulong32 version = (PA_Get4DVersion/*threadSafe*/() & 0x0000FFFF);
    //    int minor = version & 0x000F;
    int r = (version & 0x00F0) >> 4;
    int major = (version & 0xFF00) >> 8;
    if (((major >=0x15) && (r >= 3)) || (major >=0x16))
    {
        return (NSWindow *)PA_GetWindowPtr(reinterpret_cast<NSWindow *>(w));
    }
    
    return 0;
}

void setButton(NSWindow *window, NSWindowButton attribute, int set) {
    
    [[window standardWindowButton:attribute] setEnabled:set];
}

void WINDOW_SET_ENABLED(PA_PluginParameters params) {

    PA_long32 w = PA_GetLongParameter(params, 1);
    PA_long32 b = PA_GetLongParameter(params, 2);
    PA_long32 e = PA_GetLongParameter(params, 3);
 
    NSWindow *window = getWindow(w);
    
    if (window)
    {
        switch (b)
        {
            case Window_minimize_button:
                setButton(window, NSWindowMiniaturizeButton, e);
                break;
            case Window_zoom_button:
                setButton(window, NSWindowZoomButton, e);
                break;
            case Window_close_button:
                setButton(window, NSWindowCloseButton, e);
                break;
            default:
                [window setDocumentEdited:e];
                break;
        }
    }
}

int getButton(NSWindow *window, NSWindowButton attribute) {
    
    return [[window standardWindowButton:attribute] isEnabled];
}

void WINDOW_Get_enabled(PA_PluginParameters params) {

    PA_long32 w = PA_GetLongParameter(params, 1);
    PA_long32 b = PA_GetLongParameter(params, 2);
    
    NSWindow *window = getWindow(w);
    
    if (window)
    {
        switch (b)
        {
            case Window_minimize_button:
                PA_ReturnLong(params, getButton(window, NSWindowMiniaturizeButton));
                break;
            case Window_zoom_button:
                PA_ReturnLong(params, getButton(window, NSWindowZoomButton));
                break;
            case Window_close_button:
                PA_ReturnLong(params, getButton(window, NSWindowCloseButton));
                break;
            default:
                PA_ReturnLong(params, [window isDocumentEdited]);
                break;
        }
    }
}

void WINDOW_SET_ICON(PA_PluginParameters params) {

    PA_long32 w = PA_GetLongParameter(params, 1);
    PA_Picture p = PA_GetPictureParameter(params, 2);
    
    NSWindow *window = getWindow(w);
    
    if (window)
    {
        CGImageRef cgImage = (CGImageRef)PA_CreateNativePictureForScreen(p);
        NSImage *nsImage = [[NSImage alloc]initWithCGImage:cgImage size:NSZeroSize];
        NSURL *url = [[NSURL alloc]initWithString:@"file://"];
        [window setRepresentedURL:url];
        [url release];
        NSButton *button = [window standardWindowButton:NSWindowDocumentIconButton];
        [button setImage:nsImage];
        [nsImage release];
        CFRelease(cgImage);
    }
    
}

void WINDOW_Get_icon(PA_PluginParameters params) {

    PA_long32 w = PA_GetLongParameter(params, 1);
    
    NSWindow *window = getWindow(w);
    
    if (window)
    {
        NSButton *button = [window standardWindowButton:NSWindowDocumentIconButton];
        NSImage *icon = [button image];
        if (icon)
        {
            //return picture without memory leak; avoid the use of - TIFFRepresentation
            NSRect imageRect = NSMakeRect(0, 0, icon.size.width , icon.size.height);
            CGImageRef image = [icon CGImageForProposedRect:(NSRect *)&imageRect context:NULL hints:NULL];
            CFMutableDataRef data = CFDataCreateMutable(kCFAllocatorDefault, 0);
            CGImageDestinationRef destination = CGImageDestinationCreateWithData(data, kUTTypeTIFF, 1, NULL);
            CFMutableDictionaryRef properties = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, NULL, NULL);
            CGImageDestinationAddImage(destination, image, properties);
            CGImageDestinationFinalize(destination);
            PA_Picture p = PA_CreatePicture((void *)CFDataGetBytePtr(data), CFDataGetLength(data));
            PA_ReturnPicture(params, p);
            CFRelease(destination);
            CFRelease(properties);
            CFRelease(data);
        }
    }
}

void WINDOW_MINIATURIZE(PA_PluginParameters params) {

    PA_long32 w = PA_GetLongParameter(params, 1);
    
    NSWindow *window = getWindow(w);
    
    if (window)
    {
        [window performMiniaturize:nil];
    }
    
}

void WINDOW_DEMINIATURIZE(PA_PluginParameters params) {

    PA_long32 w = PA_GetLongParameter(params, 1);
    
    NSWindow *window = getWindow(w);
    
    if (window)
    {
        [window deminiaturize:nil];
    }
    
}

void WINDOW_Is_miniaturized(PA_PluginParameters params) {

    PA_long32 w = PA_GetLongParameter(params, 1);
    
    PA_long32 isMiniaturized = 0;
    
    NSWindow *window = getWindow(w);
    
    if (window)
    {
        isMiniaturized = (PA_long32)[window isMiniaturized];
    }
    
    PA_ReturnLong(params, isMiniaturized);
}
